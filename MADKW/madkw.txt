Good evening everyone. First of all I'd like to thank Robert for organizing this event.

My name is Rodolfo Palacios and I am a software developer. I'm also a musician and a cook. I have develped software that makes music. I have not developed any software related to food or cooking. And definietely I have not written a song about food... or software.

I'm here tonight to present to you two pieces of software that I have developed over the years. "Q" and "Tape". Let's start with "Tape"

According to the website... my website: "Tape pretends to be a tribute to the musicians that experimented with tape machines and tape loops in the 40s, 50s and 60s. It consists of four tracks where audio loops can be loaded. Each track is completely independent of each other."

The inspiration for developing "Tape" came after reading a book titled "Perfecting Sound Forever" by Greg Milner. In his book, Mr. Milner talks about "the major breakthroughs and glorious failures in the art and science of recording". After reading this book I became interested in the techniques developed by musicians like Pierre Schaeffer and Karlheinz Stockhausen.

The idea was to have a four track tape player/recorder with just basic functionality. Something similar to what musicians would experiment with in the 40's, 50's and 60's.

That means ability to: playback, record, create loops and adjust volume and tape speed. 

One of the key aspects of Tape, was to limit the number of features based on the idea that true creativity comes from limitation,  and not from a virtually endless source of features (cough, cough... Live!).

Tape is written in Java (Desktop) and it was developed using Eclipse :S 
It would be nice to port it to Android.

-------------------

The second project I would like to show you is called "Q". 

The basic idea for Q is this: You have a space where you can create nodes. These nodes are midi message generators that can be configured to generate all kinds of midi messages. The messages are triggered when a particle comes in contact with a node (Not always. More on this later). Particles travel along streams created by the user. The number of particles in a stream can also be configured.

Node parameters:

	- Enabled/Disabled
	- MIDI channel
	- MIDI message
	- Note velocity
	- Node probability
	- Message propagation (Not implemented)
	- Radius (Not implemented)
	- Trigger mode (Not implemented)
		- Arpeggio
			- Delay
		- Chord
		- Random
		- Random (Scale)

Stream parameters:

	- Number of particles
	- Particle spacing
	- Stream lenght
	- Smoothness

As I said, midi messages are triggered when a particle comes into contact with a node. This is partially true. What really happens is that when a particle collides with a node, the node flips a coin and decides whether or not to send a message. The number of faces on the coin (or node probability) can be configured.

Particle Speed:

One other aspect that is taken into consideration for message generation is the speed of the particle at collission time. The speed of the particle can be associated to a node's parameter, for instance Note velocity, so the velocity of the midi note varies accordingly.

Message Propagation:

Messages generated by a Node could be propagated to other 'neighbouring nodes' generating some sort of message cascading. Parameters like 'Message Propagation Probability' and 'Propagation Delay' could be introduced.

